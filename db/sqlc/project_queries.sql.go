// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: project_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getProject = `-- name: GetProject :one
SELECT id, user_profile, name, description, price, paid, status, start_time, end_time, created_at, updated_at
FROM project
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserProfile,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Paid,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectByUser = `-- name: GetProjectByUser :one
SELECT id, user_profile, name, description, price, paid, status, start_time, end_time, created_at, updated_at
FROM project
WHERE user_profile = $1
ORDER BY name
`

func (q *Queries) GetProjectByUser(ctx context.Context, userProfile pgtype.Int4) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByUser, userProfile)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserProfile,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Paid,
		&i.Status,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, user_profile, name, description, price, paid, status, start_time, end_time, created_at, updated_at
FROM project
ORDER BY created_at
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserProfile,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Paid,
			&i.Status,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
